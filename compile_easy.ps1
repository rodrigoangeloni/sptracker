# ===================================================================
# SPTracker v4.0.1 - SCRIPT DE COMPILACI√ìN SUPER F√ÅCIL
# ===================================================================
# Script √∫nico que detecta todo autom√°ticamente y compila
# ===================================================================

param(
    [string]$Version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmm')",
    [switch]$Clean,
    [switch]$Test,
    [switch]$Silent,
    [switch]$Help
)

# Configuraci√≥n
$ErrorActionPreference = "Stop"
$Script:LogFile = "compile_$(Get-Date -Format 'yyyyMMdd_HHmm').log"

function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    
    if (-not $Silent) {
        Write-Host $logMessage -ForegroundColor $Color
    }
    Add-Content -Path $Script:LogFile -Value $logMessage
}

function Show-Banner {
    if (-not $Silent) {
        Clear-Host
        Write-Host @"

 ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë
 ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïê‚ïù‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
 ‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù

      üèéÔ∏è COMPILADOR AUTOM√ÅTICO v4.0.1 - Sistema de Telemetr√≠a      
                         ‚ö° DETECCI√ìN AUTOM√ÅTICA ‚ö°

"@ -ForegroundColor Cyan
    }
}

function Show-Help {
    Write-Host @"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                SPTracker v4.0.1 - Compilador F√°cil              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

DESCRIPCI√ìN:
  Script inteligente que detecta autom√°ticamente tu entorno y compila
  SPTracker de la manera m√°s √≥ptima.

USO:
  .\compile_easy.ps1                     # Compilaci√≥n autom√°tica
  .\compile_easy.ps1 -Version "2.1.0"   # Versi√≥n espec√≠fica
  .\compile_easy.ps1 -Clean              # Limpiar antes de compilar
  .\compile_easy.ps1 -Test               # Modo de prueba
  .\compile_easy.ps1 -Silent             # Sin salida visual
  .\compile_easy.ps1 -Help               # Mostrar ayuda

DETECCI√ìN AUTOM√ÅTICA:
  ‚úì Sistema operativo (Windows/Linux/WSL)
  ‚úì Arquitectura (x64/ARM)
  ‚úì Python disponible y versi√≥n
  ‚úì Entorno virtual existente
  ‚úì Assetto Corsa instalado
  ‚úì NSIS para instaladores
  ‚úì Dependencias necesarias

SALIDAS:
  ‚Ä¢ versions/ptracker-V{version}.exe    - Cliente Windows
  ‚Ä¢ versions/stracker-V{version}.zip    - Servidor multiplataforma
  ‚Ä¢ {script}.log                        - Log detallado de compilaci√≥n

"@
    exit 0
}

function Test-Environment {
    Write-Log "üîç Detectando entorno de compilaci√≥n..." "Yellow"
    
    # Detectar OS
    $isWindows = $IsWindows -or ($PSVersionTable.PSVersion.Major -le 5)
    $isLinux = $IsLinux
    $isWSL = Test-Path "/proc/version" -and (Get-Content "/proc/version" -ErrorAction SilentlyContinue | Select-String "Microsoft|WSL")
    
    # Detectar arquitectura
    $arch = if ([Environment]::Is64BitOperatingSystem) { "x64" } else { "x86" }
    
    Write-Log "  ‚Ä¢ OS: $(if($isWindows){'Windows'}elseif($isWSL){'WSL'}elseif($isLinux){'Linux'}else{'Unknown'})"
    Write-Log "  ‚Ä¢ Arquitectura: $arch"
    
    # Verificar Python
    $pythonCmd = $null
    foreach ($cmd in @("python", "python3", "py")) {
        try {
            $version = & $cmd --version 2>&1
            if ($version -match "Python (\d+\.\d+)") {
                $pythonCmd = $cmd
                Write-Log "  ‚Ä¢ Python: $version ($pythonCmd)" "Green"
                break
            }
        } catch {}
    }
    
    if (-not $pythonCmd) {
        Write-Log "‚ùå Python no encontrado" "Red"
        throw "Python 3.7+ es requerido"
    }
    
    # Verificar directorio de trabajo
    if (-not (Test-Path "create_release.py")) {
        Write-Log "‚ùå No est√°s en el directorio correcto de SPTracker" "Red"
        throw "Ejecuta desde el directorio ra√≠z de SPTracker"
    }
    
    # Verificar configuraci√≥n
    if (-not (Test-Path "release_settings.py")) {
        Write-Log "‚ö†Ô∏è release_settings.py no existe, creando desde template..." "Yellow"
        if (Test-Path "release_settings.py.in") {
            Copy-Item "release_settings.py.in" "release_settings.py"
            Write-Log "üìã release_settings.py creado. ¬°Ed√≠talo con tus rutas!" "Magenta"
        } else {
            throw "No se encontr√≥ release_settings.py.in template"
        }
    }
    
    # Verificar Assetto Corsa (solo para Windows)
    if ($isWindows) {
        $acPaths = @(
            "C:\Program Files (x86)\Steam\steamapps\common\assettocorsa",
            "C:\Program Files\Epic Games\AssettoCorsaCompetizione",
            "D:\Games\Assetto Corsa",
            "E:\Games\Assetto Corsa"
        )
        
        $acFound = $false
        foreach ($path in $acPaths) {
            if (Test-Path "$path\apps\python\system") {
                Write-Log "  ‚Ä¢ Assetto Corsa: $path" "Green"
                $acFound = $true
                break
            }
        }
        
        if (-not $acFound) {
            Write-Log "‚ö†Ô∏è Assetto Corsa no detectado autom√°ticamente" "Yellow"
            Write-Log "   Verifica la ruta en release_settings.py"
        }
    }
    
    # Verificar NSIS (solo para Windows)
    if ($isWindows) {
        $nsisPath = "C:\Program Files (x86)\NSIS\makensis.exe"
        if (Test-Path $nsisPath) {
            Write-Log "  ‚Ä¢ NSIS: Encontrado" "Green"
        } else {
            Write-Log "‚ö†Ô∏è NSIS no encontrado - Los instaladores .exe no se crear√°n" "Yellow"
        }
    }
    
    return @{
        Python = $pythonCmd
        IsWindows = $isWindows
        IsLinux = $isLinux
        IsWSL = $isWSL
        Architecture = $arch
    }
}

function Install-Dependencies {
    param($Environment)
    
    Write-Log "üì¶ Verificando dependencias..." "Yellow"
    
    # Crear entorno virtual si no existe
    $envPath = if ($Environment.IsWindows) { "env\windows" } else { "env/linux" }
    
    if (-not (Test-Path $envPath)) {
        Write-Log "üîß Creando entorno virtual..." "Yellow"
        & $Environment.Python -m venv $envPath
    }
    
    # Activar entorno virtual
    $activateScript = if ($Environment.IsWindows) { 
        "$envPath\Scripts\Activate.ps1" 
    } else { 
        "$envPath/bin/activate" 
    }
    
    if (Test-Path $activateScript) {
        Write-Log "‚úÖ Entorno virtual preparado" "Green"
    }
}

function Start-Compilation {
    param($Environment, $Version)
    
    Write-Log "üèóÔ∏è Iniciando compilaci√≥n..." "Yellow"
    Write-Log "   Versi√≥n: $Version"
    
    # Determinar par√°metros de compilaci√≥n
    $buildArgs = @($Version)
    
    if ($Test) {
        $buildArgs = @("--test_release_process") + $buildArgs
        Write-Log "üß™ Modo de prueba activado" "Magenta"
    }
    
    if ($Environment.IsWindows -and -not $Environment.IsWSL) {
        $buildArgs = @("--windows_only") + $buildArgs
        Write-Log "ü™ü Compilando para Windows solamente"
    } elseif ($Environment.IsLinux -or $Environment.IsWSL) {
        $buildArgs = @("--linux_only") + $buildArgs
        Write-Log "üêß Compilando para Linux"
    }
    
    # Ejecutar compilaci√≥n
    $startTime = Get-Date
    Write-Log "‚è±Ô∏è Compilaci√≥n iniciada: $($startTime.ToString('HH:mm:ss'))" "Cyan"
    
    try {
        & $Environment.Python "create_release.py" $buildArgs
        
        if ($LASTEXITCODE -eq 0) {
            $endTime = Get-Date
            $duration = $endTime - $startTime
            Write-Log "‚úÖ Compilaci√≥n exitosa en $($duration.Minutes)m $($duration.Seconds)s" "Green"
            
            # Mostrar archivos generados
            if (Test-Path "versions") {
                Write-Log "üìÅ Archivos generados:" "Green"
                Get-ChildItem "versions" -Filter "*$Version*" | ForEach-Object {
                    $size = [math]::Round($_.Length / 1MB, 1)
                    Write-Log "   ‚Ä¢ $($_.Name) ($size MB)"
                }
            }
            
            return $true
        } else {
            throw "Error en la compilaci√≥n (c√≥digo: $LASTEXITCODE)"
        }
    } catch {
        Write-Log "‚ùå Error durante la compilaci√≥n: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Invoke-Cleanup {
    Write-Log "üßπ Limpiando archivos temporales..." "Yellow"
    
    $cleanupItems = @(
        "build",
        "dist", 
        "*.spec",
        "ptracker-server-dist.py",
        "nsis_temp_files*",
        "ptracker.nsh"
    )
    
    foreach ($item in $cleanupItems) {
        if (Test-Path $item) {
            Remove-Item $item -Recurse -Force -ErrorAction SilentlyContinue
            Write-Log "  ‚Ä¢ Eliminado: $item"
        }
    }
    
    # Limpiar en subdirectorio stracker
    if (Test-Path "stracker") {
        Push-Location "stracker"
        foreach ($item in @("build", "dist", "*.spec")) {
            if (Test-Path $item) {
                Remove-Item $item -Recurse -Force -ErrorAction SilentlyContinue
                Write-Log "  ‚Ä¢ Eliminado: stracker/$item"
            }
        }
        Pop-Location
    }
    
    Write-Log "‚úÖ Limpieza completada" "Green"
}

# ===================================================================
# PROGRAMA PRINCIPAL
# ===================================================================

if ($Help) { Show-Help }

Show-Banner

Write-Log "üöÄ SPTracker v4.0.1 - Compilador Autom√°tico" "Cyan"
Write-Log "üìÖ $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
Write-Log "üìÇ Directorio: $PWD"
Write-Log "üìã Log: $Script:LogFile"
Write-Log ""

try {
    # Detectar entorno
    $env = Test-Environment
    
    # Limpiar si se solicita
    if ($Clean) {
        Invoke-Cleanup
    }
    
    # Instalar dependencias
    Install-Dependencies -Environment $env
    
    # Compilar
    $success = Start-Compilation -Environment $env -Version $Version
    
    if ($success) {
        Write-Log ""
        Write-Log "üéâ ¬°COMPILACI√ìN COMPLETADA CON √âXITO!" "Green"
        Write-Log "üìÅ Revisa la carpeta 'versions/' para los archivos generados"
        Write-Log "üìã Log completo guardado en: $Script:LogFile"
        
        if (-not $Silent) {
            Write-Host ""
            Write-Host "Presiona cualquier tecla para continuar..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
    } else {
        Write-Log "üí• COMPILACI√ìN FALLIDA" "Red"
        Write-Log "üìã Revisa el log para m√°s detalles: $Script:LogFile"
        exit 1
    }
    
} catch {
    Write-Log "üí• ERROR CR√çTICO: $($_.Exception.Message)" "Red"
    Write-Log "üìã Log guardado en: $Script:LogFile"
    
    if (-not $Silent) {
        Write-Host ""
        Write-Host "Presiona cualquier tecla para salir..." -ForegroundColor Gray
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    }
    exit 1
}
